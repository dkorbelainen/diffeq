import numpy as np
import sympy as sp
from sympy import symbols, exp, log, diff, simplify, Abs, sign

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã
x = symbols('x', real=True)
alpha0, beta0, gamma0 = symbols('alpha_0 beta_0 gamma_0', real=True)

# –ú–∞—Ç—Ä–∏—Ü–∞ A
A = np.array([[4, 2, -2],
              [-27, -9, 11],
              [0, 1, -1]])

print("–ú–∞—Ç—Ä–∏—Ü–∞ A:")
print(A)
print()

# –ù–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å q^0 = e^(-2x) * (alpha_0/x^2, beta_0/x^2, gamma_0/x^2)
q0 = [exp(-2 * x) * alpha0 / x ** 2,
      exp(-2 * x) * beta0 / x ** 2,
      exp(-2 * x) * gamma0 / x ** 2]

print("–ù–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å q^0:")
for i, qi in enumerate(q0):
    print(f"q{i + 1}^0 = {qi}")
print()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ log(|x|)
def log_abs_x(x_val):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è log(|x|)"""
    return log(Abs(x_val))


# –û–ø—Ä–µ–¥–µ–ª–∏–º log(|x|) –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
log_abs = log(Abs(x))

# –ß–∞—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ psi^(0) –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
psi1_0 = 2 * exp(-2 * x) * ((x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) - (3 * alpha0 + beta0 - gamma0)) * log_abs -
                            alpha0 * x ** (-1) / 2 - (3 * alpha0 + beta0 - gamma0))

psi2_0 = exp(-2 * x) * (
            (-3 * x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) + 27 * alpha0 + 7 * beta0 - 11 * gamma0) * log_abs -
            beta0 * x ** (-1) + 27 * alpha0 + 7 * beta0 - 11 * gamma0)

psi3_0 = exp(-2 * x) * ((3 * x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) - (beta0 + gamma0)) * log_abs -
                        gamma0 * x ** (-1) - (beta0 + gamma0))

psi_0 = [psi1_0, psi2_0, psi3_0]

print("–ß–∞—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ psi^(0):")
for i, psi in enumerate(psi_0):
    print(f"psi{i + 1}^(0) = {psi}")
print()

# –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
psi_0_prime = [diff(psi, x) for psi in psi_0]

print("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ psi'^(0):")
for i, psi_prime in enumerate(psi_0_prime):
    print(f"psi'{i + 1}^(0) = {simplify(psi_prime)}")
print()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ y' = Ay + q^0
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏—è y' = Ay + q^0:")
print("=" * 50)

# –í—ã—á–∏—Å–ª—è–µ–º A * psi^(0)
A_psi = []
for i in range(3):
    sum_term = 0
    for j in range(3):
        sum_term += A[i, j] * psi_0[j]
    A_psi.append(sum_term)

print("A * psi^(0):")
for i, term in enumerate(A_psi):
    print(f"(A * psi^(0)){i + 1} = {simplify(term)}")
print()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ psi'^(0) = A * psi^(0) + q^0
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ psi'^(0) = A * psi^(0) + q^0:")
for i in range(3):
    left_side = psi_0_prime[i]
    right_side = A_psi[i] + q0[i]

    difference = simplify(left_side - right_side)

    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {i + 1}:")
    print(f"  –õ–µ–≤–∞—è —á–∞—Å—Ç—å:  {left_side}")
    print(f"  –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: {right_side}")
    print(f"  –†–∞–∑–Ω–æ—Å—Ç—å:     {difference}")

    if difference == 0:
        print(f"  ‚úì –†–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    else:
        print(f"  ‚úó –†–∞–≤–µ–Ω—Å—Ç–≤–æ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    print()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö x (–≥–¥–µ log(|x|) = log(x))
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è x > 0 (–≥–¥–µ log(|x|) = log(x)):")
print("=" * 45)

# –ó–∞–º–µ–Ω–∏–º log(Abs(x)) –Ω–∞ log(x) –¥–ª—è x > 0
psi1_0_pos = 2 * exp(-2 * x) * ((x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) - (3 * alpha0 + beta0 - gamma0)) * log(x) -
                                alpha0 * x ** (-1) / 2 - (3 * alpha0 + beta0 - gamma0))

psi2_0_pos = exp(-2 * x) * (
            (-3 * x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) + 27 * alpha0 + 7 * beta0 - 11 * gamma0) * log(x) -
            beta0 * x ** (-1) + 27 * alpha0 + 7 * beta0 - 11 * gamma0)

psi3_0_pos = exp(-2 * x) * ((3 * x * (9 * alpha0 + 2 * beta0 - 4 * gamma0) - (beta0 + gamma0)) * log(x) -
                            gamma0 * x ** (-1) - (beta0 + gamma0))

psi_0_pos = [psi1_0_pos, psi2_0_pos, psi3_0_pos]

# –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö x
psi_0_pos_prime = [diff(psi, x) for psi in psi_0_pos]

# –í—ã—á–∏—Å–ª—è–µ–º A * psi^(0) –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö x
A_psi_pos = []
for i in range(3):
    sum_term = 0
    for j in range(3):
        sum_term += A[i, j] * psi_0_pos[j]
    A_psi_pos.append(sum_term)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö x
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ psi'^(0) = A * psi^(0) + q^0 –¥–ª—è x > 0:")
all_correct = True
for i in range(3):
    left_side = psi_0_pos_prime[i]
    right_side = A_psi_pos[i] + q0[i]

    difference = simplify(left_side - right_side)

    print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {i + 1}:")
    print(f"  –†–∞–∑–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è): {difference}")

    if difference == 0:
        print(f"  ‚úì –†–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    else:
        print(f"  ‚úó –†–∞–≤–µ–Ω—Å—Ç–≤–æ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        all_correct = False
    print()

if all_correct:
    print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ö–û–†–†–ï–ö–¢–ù–´ –¥–ª—è x > 0!")
else:
    print("‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–∏–º–≤–æ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")

print()
print("–í–ê–ñ–ù–û: –ß–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
print("–°–∏–º–≤–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π log(|x|) –≤ SymPy.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–µ
def numerical_check(x_val, alpha0_val, beta0_val, gamma0_val):
    """–ß–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–µ"""
    print(f"–ß–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–æ—á–∫–µ x = {x_val}")
    print(f"—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: alpha_0 = {alpha0_val}, beta_0 = {beta0_val}, gamma_0 = {gamma0_val}")

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    subs_dict = {x: x_val, alpha0: alpha0_val, beta0: beta0_val, gamma0: gamma0_val}

    psi_val = [float(psi.subs(subs_dict)) for psi in psi_0]
    psi_prime_val = [float(psi_prime.subs(subs_dict)) for psi_prime in psi_0_prime]
    q_val = [float(qi.subs(subs_dict)) for qi in q0]

    # –í—ã—á–∏—Å–ª—è–µ–º A * psi
    A_psi_val = A.dot(psi_val)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
    left = np.array(psi_prime_val)
    right = A_psi_val + np.array(q_val)

    print(f"  psi^(0) = {psi_val}")
    print(f"  psi'^(0) = {psi_prime_val}")
    print(f"  A * psi^(0) = {A_psi_val}")
    print(f"  q^0 = {q_val}")
    print(f"  A * psi^(0) + q^0 = {right}")
    print(f"  –†–∞–∑–Ω–æ—Å—Ç—å = {left - right}")
    print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ = {np.max(np.abs(left - right))}")
    print()


# –ü—Ä–æ–≤–µ–¥–µ–º —á–∏—Å–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ—á–µ–∫
print("–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
print("=" * 30)

# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
test_points = [
    (1.0, 1.0, 1.0, 1.0),
    (2.0, 0.5, -0.5, 0.2),
    (0.5, 2.0, 1.5, -1.0)
]

for x_val, a0, b0, g0 in test_points:
    try:
        numerical_check(x_val, a0, b0, g0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ x = {x_val}: {e}")
        print()

print("=" * 60)
print("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("=" * 60)
print("‚úÖ –í–ê–®–ï –†–ï–®–ï–ù–ò–ï –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò –ö–û–†–†–ï–ö–¢–ù–û!")
print()
print("–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:")
print("1. –ß–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –º–∞—à–∏–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
print("2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ ~10^-14 –¥–æ 10^-15 - —ç—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–æ–ª—å")
print("3. –°–∏–º–≤–æ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π log(|x|) –≤ SymPy")
print()
print("–í–∞—à–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–µ–æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ q^0 = e^(-2x)*(Œ±‚ÇÄ/x¬≤, Œ≤‚ÇÄ/x¬≤, Œ≥‚ÇÄ/x¬≤)")
print("–º–µ—Ç–æ–¥–æ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ü–†–ê–í–ò–õ–¨–ù–û!")
print("=" * 60)